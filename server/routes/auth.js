const express = require("express");
const User = require("../models/userModel"); // relative routing same as flutter
const jwt = require("jsonwebtoken");
const auth = require("../middelweres/auth_middelwere");
const authRouter = express.Router();
/* 
     app.post('/api/signup')  // Route of our api e.g. localhost:3001/api/signup
     now if we make a post request on this route it will execute whatever code written in callback function
     call back will take request and response as a parameter with request we can access all the data which is sended by the client
     and with response whatever data you want to sent can be accessed with it. 
     */
authRouter.post('/api/signup', async (req, res) => {
    try {
        // On post request from client side it looks like below
        /* http.post(localhost:300./api/signup', body : {
          'name' : name,
          'email' : email,
          'profilePic' : profilePic,
         }) */
        /*
        The line const {name, email, profilePic} = req.body; will extract the name, email, and profilePic properties
        from req.body and assign them to corresponding variables. So, after executing this line, you can use these variables directly in your code,
        like name, email, and profilePic, to access the corresponding values from the request body.
        ** req.body is an object
        */
        const { name, email, profilePic } = req.body;
        // to store the data create a model in userModel.js

        // email already exists in DB? than do not save data again.
        let user = await User.findOne({ email });  // finding one user with the email property from DB as the email received from client side.
        if (!user) {
            // create new user 
            user = new User({
                email: email,
                profilePic: profilePic,
                name: name,
            });
            // store data
            user = await user.save(); // again storing it to user var bcz we want id generated by mongoDB
        }
        // Consider jwt as a wrapper around some information or data
        const token = jwt.sign({ id: user._id }, "passwordKey");  //jwt.sign() will get the data based on the id passed on it and also sing() method takes secrete key as a parameter using which we can access this jwt which can be anything but should be unique b

        res.json({ user, token });    // returning data and jwt to client side .json automatically encode it into a json formate   
    } catch (e) {
        res.status(500).json({ error: e.message });
    }
});

// another route to get the user data, since we are retrieving some data we will use get
authRouter.get("/", auth, async (req, res) => {      //localhost:3000/
    const user = await User.findById(req.user);
    res.json({ user, token: req.token });
});

module.exports = authRouter;